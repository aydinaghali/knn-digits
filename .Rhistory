reticulate::repl_python()
Rcpp::sourceCpp("Downloads/test_r.cpp")
r2d3::r2d3("Downloads/test.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("Downloads/test.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("Downloads/test.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("Downloads/test.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("Downloads/test.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("Downloads/test.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("Downloads/test.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("Downloads/test.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
l = list(c(5,6), 6, 7)
l
length(l)
length(unlist(l))
length(unique(unlist(l)))
shiny::runApp('Documents/DSMA_assignments/seminar1/applications1/web')
setwd("~/Documents/DSMA_assignments/seminar1/applications1")
source("~/Documents/DSMA_assignments/seminar1/applications1/digits.R")
etwd("~/Documents/DSMA_assignments/seminar1/applications1")
setwd("~/Documents/DSMA_assignments/seminar1/applications1")
library(readr)
library(tidyverse)
library(class)
library(caret)
library(kknn)
library(magick)
library(ggplot2)
data <- read_csv("train.csv")
pred_set <- read_csv("test.csv")
data <- data %>% apply(2, as.numeric) %>% data.frame()
data[,1] <- factor(data[,1])
pred_set <- pred_set %>% apply(2, as.numeric) %>% data.frame()
# function to draw a digit
display_digit <- function(digit){
d <- matrix(digit, nrow=28) %>% apply(2, as.numeric) %>% { .[,ncol(.):1] }
image(1:28, 1:28, d)
}
# test the function
display_digit(pred_set[1,])
# split data
set.seed(123)
split_idx <- sample(1:nrow(data), size = 0.8*nrow(data))
train_set <- data[split_idx,]
test_set <- data[-split_idx,]
# look at average digits
for(i in 0:9){
train_set[train_set$label==i,][2:785] %>% apply(2, FUN=mean) %>% display_digit()
}
vec9 <- train_set[train_set$label==9,][2:785]
df9 <- data.frame(vec9) %>% t() %>% data.frame()
colnames(df9) <- paste0("pixel", 0:(28*28-1))
display_digit(df9[1,])
vec9 <- train_set[train_set$label==9,][2:785] %>% apply(2, FUN=mean)
df9 <- data.frame(vec9) %>% t() %>% data.frame()
colnames(df9) <- paste0("pixel", 0:(28*28-1))
display_digit(df9[1,])
predict(model.knn, newdata = df9, type="class")
# set up the cross validation (30-fold)
ctrl.knn = trainControl(method = "repeatedcv", number = 10, repeats = 3, verbose = TRUE)
# run cv, find best K
set.seed(123)
tune.knn <- train(
label ~ .,
data = train_set[sample(1:nrow(train_set), size = 2000),],
method = "knn",
trControl = ctrl.knn,
tuneGrid = data.frame(k = 1:30)
)
# train model with best K
set.seed(123)
model.knn <- knn3(
label ~ .,
data = train_set,
#k = tune.knn$bestTune$k
k = 5
)
vec9 <- train_set[train_set$label==9,][2:785] %>% apply(2, FUN=mean)
df9 <- data.frame(vec9) %>% t() %>% data.frame()
colnames(df9) <- paste0("pixel", 0:(28*28-1))
display_digit(df9[1,])
predict(model.knn, newdata = df9, type="class")
predict(model.knn, newdata = df9, type="prob")
vec9 <- train_set[train_set$label==7,][2:785] %>% apply(2, FUN=mean)
df9 <- data.frame(vec9) %>% t() %>% data.frame()
colnames(df9) <- paste0("pixel", 0:(28*28-1))
display_digit(df9[1,])
predict(model.knn, newdata = df9, type="class")
predict(model.knn, newdata = df9, type="prob")
vec9 <- train_set[train_set$label==6,][2:785] %>% apply(2, FUN=mean)
df9 <- data.frame(vec9) %>% t() %>% data.frame()
colnames(df9) <- paste0("pixel", 0:(28*28-1))
display_digit(df9[1,])
predict(model.knn, newdata = df9, type="class")
predict(model.knn, newdata = df9, type="prob")
testvec <- readRDS("web/test") %>% as.vector() * 255
test <- data.frame(testvec) %>% t() %>% data.frame()
colnames(test) <- paste0("pixel", 0:(28*28-1))
display_digit(test[1,])
predict(model.knn, newdata = test, type="class")
predict(model.knn, newdata = test, type="prob")
train_set[train_set$label==3,][2:785] %>% apply(2, FUN=mean) %>% display_digit()
runApp('web')
testvec <- readRDS("web/test") %>% as.vector() * 255
test <- data.frame(testvec) %>% t() %>% data.frame()
colnames(test) <- paste0("pixel", 0:(28*28-1))
display_digit(test[1,])
predict(model.knn, newdata = test, type="class")
predict(model.knn, newdata = test, type="prob")
runApp('web')
testvec <- readRDS("web/test") %>% as.vector() * 255
test <- data.frame(testvec) %>% t() %>% data.frame()
colnames(test) <- paste0("pixel", 0:(28*28-1))
display_digit(test[1,])
display_digit(test[1,])
predict(model.knn, newdata = test, type="class")
predict(model.knn, newdata = test, type="prob")
runApp('web')
runApp('web')
runApp('web')
testvec <- readRDS("web/test") %>% as.vector() * 255
test <- data.frame(testvec) %>% t() %>% data.frame()
colnames(test) <- paste0("pixel", 0:(28*28-1))
display_digit(test[1,])
predict(model.knn, newdata = test, type="class")
predict(model.knn, newdata = test, type="prob")
